class BigNum {
  // 今のところ自然数だけ。
  static from(number) {
    var radix = 10
    var type = typeof number
    var big = []
    if (type === "number") {
      number = Math.floor(number)
      while (number !== 0) {
        big.push(number % radix)
        number = Math.floor(number / radix)
      }
    }
    if (type === "string") {
      big = number.split("").map(Number).reverse()
    }
    return big
  }

  static add(a, b) {
    var radix = 10
    var radix1 = radix - 1

    var c, minLength
    if (a.length > b.length) {
      c = a.slice()
      minLength = b.length
    }
    else {
      c = b.slice()
      minLength = a.length
    }

    var x, carry = 0
    for (var i = 0; i < minLength; ++i) {
      x = a[i] + b[i] + carry
      c[i] = x % radix
      carry = Math.floor(x / radix)
    }

    if (carry !== 0) {
      for (var i = minLength; i < c.length; ++i) {
        if (c[i] < radix1) {
          c[i] += carry
          carry = 0
          break
        }
        c[i] = 0
      }

      if (carry !== 0) {
        c.push(carry)
      }
    }

    return c
  }

  // https://en.wikipedia.org/wiki/Karatsuba_algorithm
  // static mulKaratsuba(a, b) {
  //   if (a.length === 1 || b.length === 1) {
  //     return this.mulNaive(a, b)
  //   }
  //   var m = Math.max(a.length, b.length)
  //   var m2 = m / 2
  //   var low1 = a.slice(0, m2)
  //   var high1 = a.slice(m2)
  //   var low2 = b.slice(0, m2)
  //   var high2 = b.slice(m2)
  //   var z0 = mulKaratsuba(low1, low2)
  //   var z1 = mulKaratsuba((low1 + high1), (low2 + high2))
  //   var z2 = mulKaratsuba(high1, high2)
  //   // ここからまだ
  //   var A = (z2 * 10 ^ (2 * m2))
  //   var B = ((z1 - z2 - z0) * 10 ^ (m2))
  //   return A + B + z0
  // }

  static mul(a, b) {
    var radix = 10
    var c = new Array(Math.max(a.length + b.length)).fill(0)
    for (var i = 0; i < a.length; ++i) {
      for (var j = 0; j < b.length; ++j) {
        var ij = i + j
        var x = a[i] * b[j] + c[ij]
        c[ij] = x % radix
        c[ij + 1] += Math.floor(x / radix)
      }
    }
    if (c[c.length - 1] === 0) {
      c.pop()
    }
    return c
  }

  // b は自然数のみ。
  static pow(a, b) {
    var power = a
    for (var n = 2; n <= b; ++n) {
      power = this.mul(power, a)
    }
    return power
  }

  // Less Than (a < b)
  static lt(a, b) {
    if (a.length < b.length) {
      return true
    }
    if (a.length > b.length) {
      return false
    }

    var i = a.length - 1
    while (a[i] === b[i]) {
      --i
    }
    if (a[i] < b[i]) {
      return true
    }
    return false
  }

  // Greater Than (a > b)
  static gt(a, b) {
    if (a.length > b.length) {
      return true
    }
    if (a.length < b.length) {
      return false
    }

    var i = a.length - 1
    while (a[i] === b[i]) {
      --i
    }
    if (a[i] > b[i]) {
      return true
    }
    return false
  }

  // Equal (a == b)
  static eq(a, b) {
    if (a.length - b.length !== 0) {
      return false
    }

    for (var i = 0; i < a.length; ++i) {
      if (a[i] !== b[i]) {
        return false
      }
    }
    return true
  }

  static toString(n) {
    var str = ""
    n.reverse()
    for (var i = 0; i < n.length; ++i) {
      str += n[i]
    }
    return str
  }
}

var sum = BigNum.from(0)
for (var i = 1; i < 1000; ++i) {
  console.log(i)
  var num = BigNum.from(i)
  var power = BigNum.pow(num, i)
  sum = BigNum.add(sum, power)
}
console.log(BigNum.toString(sum))

// 368199144695177095375011227646795567793680622934654583760988100234910747716194381428659099527845945869942643191290894720342979906407679647259860434238468038326040809691037615370376237713648510063115732951461774246705584266865759601815843666442832284556880313114548151539190975398485496645576513465858582712336401166221956188173449531674102688908321764663020306699770408625340766091595022791379368098369306375602813856646358773751558775213460225796579846583334007349358624342339332981334571237888809283103348760261360175950815609179464026871005243652109980863552142014242903434068560936573231079342194031864413918101238151056509267393515760392842472501391594073463001521843811073767021711026307504695733467897821866906648469828346607412967395801797791683609834722432241952845352564681868240369569566192825555323558078061997527689983848863374786789331581565252059172614339424600986143259233167583371070362625554531852054166117148858229508581589614337594463277554380518380921301218836327102231407332201109740102580216469298331766920619646083790732807627360614428085171565006289728508688964226799647192582924058589530750674578385365561878559589685756225692348914746922810913915619834754117648358035814128670294158565669942087736286390942241547226015004471330630113072042704288905042142628193771918594574302202147201188486345913190833752307476966010547423928871063118783026036381319039052008252072057933666712918946233312793697094074224187872045970976444309242782187738320257490080824330074991698698239561125811127607863900355221737846690567707344074494145266662103839812840216303448476913957072355732716627098372245223046792919747259113157425824064858331415400943278213042954635053574045209984512221264241903550178416824551412548637590007779082539288247751653566899882749594405895102587985539527709493510049546445427265617478399107188238681771215904234119392247489751079085948055945098805617963722928469554263782217625160428008228845552540344494860195267115187092227766195753907211126646150140614744233974765273475619964311852858614167819668340124730487710162006793529985758820653677274379563313495454526632718723482339494825759821076401694316043456512117937935456463521463021197726694983558929132357576188594977516630734212863869456164205525536767311298137182511494649463663073759219213056823561667776093739425742883930712609962163464088038826569132032160692637206183085942987973684584276491784843115472077900401692595694119273553511025991265446039366288921743581333200083717105241171504606883543418862024047552177055263424469501298905901938158245938633694105024815166679813689156668341197713475094389904887126794468901893850475050011205225742455555625750560213230387910337983950333245020653238989115507013882956277763880795687210857196493893142656713105966275422144605988058939600603604226921401402096519294250488670297983396353279460453142375542267881989197481789780678955093763193658603690898474826976906544473978017455720367929981796023041785852626797271283465789498383642350667978127819110846700